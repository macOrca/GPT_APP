[
    {
        "title": "問1 - 条件分岐",
        "description": "ユーザが入力した2つの整数を比較し、以下の条件に従って結果を出力するプログラムを書いてください。\n\n条件\n1. 最初の数が大きければ「○○は△△より大きい」と表示。\n2. 2つの数が等しければ「○○と△△は等しい」と表示。\n3. それ以外の場合は「○○は△△より小さい」と表示。",
        "sample_code": "",
        "input_example": "15\n10",
        "output_example": "15は10より大きい"
    },
    {
        "title": "問2 - 繰り返し処理",
        "description": "1から10までの数値のうち、3の倍数だけを表示するプログラムを書いてください。",
        "sample_code": "",
        "input_example": "",
        "output_example": "3\n6\n9"
    },
    {
        "title": "問3 - 関数化",
        "description": "2つの整数を引数として受け取り、その和を返す関数 add_numbers(a, b) を作成し、以下のコードと組み合わせて関数を呼び出し結果を表示してください。",
        "sample_code": "result = add_numbers(10, 5)\n\nprint(result)",
        "input_example": "",
        "output_example": "15"
    },
    {
        "title": "問4 - うるう年の判定",
        "description": "ある年がうるう年であるかどうかを判定するプログラムを作成してください。うるう年は以下のルールに基づいて判定されます。\n\nルール:\n1. 西暦年が4で割り切れる場合はうるう年です。\n2. ただし、100で割り切れる年はうるう年ではありません。\n3. さらに、400で割り切れる年は例外としてうるう年です。",
        "sample_code": "",
        "input_example": "1999",
        "output_example": "うるう年ではありません"
    },
    {
        "title": "問5 - 2重ループ",
        "description": "以下のルール通りに計算結果を表示する2重ループのプログラムを作成してください。\n\nルール\n1. 外側のループで1から5までの数を「行」として扱う。\n2. 内側のループも1から5までの数を「列」を扱い、行番号と列番号の積を計算する。\n3. 計算結果を出力例の様に並べて表示する。",
        "sample_code": "",
        "input_example": "",
        "output_example": "1 2 3 4 5\n2 4 6 8 10\n3 6 9 12 15\n4 8 12 16 20\n5 10 15 20 25"
    },
    {
        "title": "問6 - 正の数の合計を計算",
        "description": "正の数を入力し続け、合計を計算するプログラムを作成してください。\n0または負の数が入力された場合、ループを終了し、合計を表示してください。\n\nルール\n1. 入力された数値が正の数の場合、その数値を合計に足してループを継続する。\n2. 入力された数値が0または負の数の場合、break を使ってループを終了する。\n3. 終了後、合計を表示する。",
        "sample_code": "",
        "input_example": "5\n10\n-1",
        "output_example": "数値を入力してください (終了するには0または負の数): 5\n数値を入力してください (終了するには0または負の数): 10\n数値を入力してください (終了するには0または負の数): -1\n合計: 15"
    },
    {
        "title": "問7 - リストの最大・最小値",
        "description": "リストに入っている数値の中から、最大値と最小値を求めるプログラムを作成してください。\n\n条件：\nリストの中身は [8, 3, 14, 1, 7]  とする。\n",
        "sample_code": "",
        "input_example": "",
        "output_example": "最大値: 14\n最小値: 1"
    },
    {
        "title": "問8 - リストの抽出・ソート",
        "description": "ユーザが入力した数値のリスト（スペース区切り）から、以下の操作を行うプログラムを作成してください。\n\n操作：\n1. リストの中から偶数だけを抽出して新しいリストを作成する。\n2. 偶数リストを昇順にソートして出力する。",
        "sample_code": "",
        "input_example": "7 12 5 20 3 8",
        "output_example": "[8, 12, 20]"
    },
    {
        "title": "問9 - ATMシミュレーション",
        "description": "以下の仕様に従い、空欄「ア」〜「オ」に適切なコードを書いて、ATMの操作を再現するプログラムを完成させてください。\n\n仕様\n1. 初期残高（balance）は 10,000円とします。\n2. メニューの選択肢以外の入力があった場合は「無効な操作です」と表示し、再度メニューを表示します。\n3. 以下の操作を選択できます。\n\n\t1: 預け入れ（金額を入力して残高を増やす）\n\n\t2: 引き出し（金額を入力して残高を減らす。ただし、残高不足の場合はエラーを表示）\n\n\t3: 残高照会（現在の残高を表示）\n\n\t4: 終了（プログラムを終了）",
        "sample_code": "balance = 10000\n\nwhile True:\n    print(\"1: 預け入れ\")\n    print(\"2: 引き出し\")\n    print(\"3: 残高照会\")\n    print(\"4: 終了\")\n    choice = int(input(\"操作を選んでください: \"))\n\n    if choice == 1:\n        amount = int(input(\"預け入れる金額を入力してください: \"))\n        if amount > 0:\n            balance = balance + 「ア」\n            print(amount, \"円を預け入れました。\")\n        else:\n            print(\"有効な金額を入力してください。\")\n    elif choice == 2:\n        amount = int(input(\"引き出す金額を入力してください: \"))\n        if amount <= 「イ」:\n            balance = balance -「ウ」\n            print(amount, \"円を引き出しました。\")\n        else:\n            print(\"残高不足です。\")\n    elif choice == 3:\n        print(\"現在の残高は\", 「エ」, \"円です。\")\n    elif choice == 4:\n        print(\"操作を終了します。\")\n        「オ」\n    else:\n        print(\"無効な操作です。\")\n",
        "input_example": "",
        "output_example": ""
    },
    {
        "title": "問10 - 成績判定プログラム",
        "description": "以下のプログラムは、生徒の点数データを判定するプログラムです。仕様に従い、空欄「ア」〜「コ」に適切なコードを書いて完成させてください。\n\n仕様\n1. 点数が 80 点以上なら「優秀」、50 点以上なら「合格」、それ以外は「不合格」と判定する。\n2. 各成績の人数をカウントする。\n3. 全体の平均点を計算する。",
        "sample_code": "# 点数のリスト\nscores = [85, 70, 45, 90, 60]\n\n# 成績を判定する関数\ndef judge_score(score):\n    if score >= 「ア」:\n        return \"優秀\"\n    elif score >= 「イ」:\n        return \"合格\"\n    else:\n        return 「ウ」\n\n# 平均点を計算する関数\ndef calculate_average(scores):\n    total = 0\n    for score in scores:\n        total = total + 「エ」  # 点数を合計\n    return total / 「オ」 # 平均点を計算\n\n# 判定処理\nresults = []\nfor score in scores:\n    result = 「カ」(score)  # 関数を呼び出す\n    results.append(result)\n\n# 結果の集計\nexcellent = results.count(「キ」)  # 優秀の人数\npass_count = results.count(「ク」)  # 合格の人数\nfail = results.count(「ケ」)  # 不合格の人数\n\n# 出力\nprint(\"判定結果: \", results)\nprint(\"優秀: \", excellent, \"人\")\nprint(\"合格: \", pass_count, \"人\")\nprint(\"不合格: \", fail, \"人\")\nprint(\"平均点: \", calculate_average(「コ」), \"点\")  # 平均点を表示",
        "input_example": "",
        "output_example": ""
    }
]
